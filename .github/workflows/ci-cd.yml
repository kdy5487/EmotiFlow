name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  # 코드 품질 검사
  quality-check:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.24.0'
          channel: 'stable'

      - name: Get dependencies
        run: flutter pub get

      - name: Analyze code
        run: flutter analyze

      - name: Run tests
        run: flutter test

      - name: Check code coverage
        run: flutter test --coverage

  # Android 빌드 테스트
  android-build:
    runs-on: ubuntu-latest
    needs: quality-check
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.24.0'
          channel: 'stable'

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: '17'

      - name: Get dependencies
        run: flutter pub get

      - name: Build APK (Debug)
        run: flutter build apk --debug

      - name: Build APK (Release)
        run: flutter build apk --release

      - name: Upload APK artifacts
        uses: actions/upload-artifact@v4
        with:
          name: android-apks
          path: build/app/outputs/flutter-apk/

  # iOS 빌드 테스트 (macOS에서만 가능)
  ios-build:
    runs-on: macos-latest
    needs: quality-check
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.24.0'
          channel: 'stable'

      - name: Get dependencies
        run: flutter pub get

      - name: Build iOS (Debug)
        run: flutter build ios --debug --no-codesign

      - name: Upload iOS artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ios-builds
          path: build/ios/

  # 웹 빌드 테스트
  web-build:
    runs-on: ubuntu-latest
    needs: quality-check
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.24.0'
          channel: 'stable'

      - name: Get dependencies
        run: flutter pub get

      - name: Build web
        run: flutter build web

      - name: Upload web artifacts
        uses: actions/upload-artifact@v4
        with:
          name: web-build
          path: build/web/

  # 릴리즈 빌드 및 배포 (main 브랜치에 푸시될 때만)
  release:
    runs-on: ubuntu-latest
    needs: [quality-check, android-build, web-build]
    if: github.ref == 'refs/heads/main'
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.24.0'
          channel: 'stable'

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: '17'

      - name: Get dependencies
        run: flutter pub get

      - name: Build release APK
        run: flutter build apk --release

      - name: Build release web
        run: flutter build web --release

      - name: Create release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ github.run_number }}
          release_name: Release v${{ github.run_number }}
          draft: false
          prerelease: false

      - name: Upload APK to release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: build/app/outputs/flutter-apk/app-release.apk
          asset_name: emoti-flow-v${{ github.run_number }}.apk
          asset_content_type: application/vnd.android.package-archive

      - name: Upload web build to release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: build/web/
          asset_name: emoti-flow-web-v${{ github.run_number }}.zip
          asset_content_type: application/zip

  # 스테이징 빌드 (develop 브랜치에 푸시될 때만)
  staging:
    runs-on: ubuntu-latest
    needs: [quality-check, android-build, web-build]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.24.0'
          channel: 'stable'

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: '17'

      - name: Get dependencies
        run: flutter pub get

      - name: Build staging APK
        run: flutter build apk --profile

      - name: Build staging web
        run: flutter build web --profile

      - name: Upload staging artifacts
        uses: actions/upload-artifact@v4
        with:
          name: staging-builds
          path: |
            build/app/outputs/flutter-apk/
            build/web/
