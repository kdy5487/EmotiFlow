import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:go_router/go_router.dart';
import 'package:emoti_flow/theme/app_theme.dart';
import 'package:emoti_flow/features/profile/providers/profile_provider.dart';

class SettingsPage extends ConsumerStatefulWidget {
  const SettingsPage({super.key});

  @override
  ConsumerState<SettingsPage> createState() => _SettingsPageState();
}

class _SettingsPageState extends ConsumerState<SettingsPage> {
  // Í∞Å ÏÑπÏÖòÏùò ÌéºÏπ®/Ï†ëÌûò ÏÉÅÌÉú
  final Map<String, bool> _expandedSections = {
    'account': false,
    'app': false,
    'privacy': false,
    'data': false,
    'support': false,
    'danger': false,
  };

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: AppTheme.background,
      appBar: AppBar(
        title: const Text(
          'ÏÑ§Ï†ï',
          style: TextStyle(
            fontWeight: FontWeight.bold,
            color: AppTheme.primary,
          ),
        ),
        backgroundColor: Colors.transparent,
        elevation: 0,
        leading: IconButton(
          icon: const Icon(Icons.arrow_back),
          onPressed: () => context.pop(),
        ),
        actions: [
          IconButton(
            icon: const Icon(Icons.help_outline),
            onPressed: () {
              // ÎèÑÏõÄÎßê ÌéòÏù¥ÏßÄÎ°ú Ïù¥Îèô
            },
          ),
        ],
      ),
      body: SingleChildScrollView(
        padding: const EdgeInsets.all(16),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            // Í≥ÑÏ†ï ÏÑ§Ï†ï
            _buildExpandableSection(
              key: 'account',
              title: 'Í≥ÑÏ†ï',
              emoji: 'üë§',
              children: [
                _buildSettingItem(
                  icon: Icons.edit,
                  title: 'ÌîÑÎ°úÌïÑ Ìé∏Ïßë',
                  subtitle: 'ÎãâÎÑ§ÏûÑ, ÏûêÍ∏∞ÏÜåÍ∞ú, ÌîÑÎ°úÌïÑ Ïù¥ÎØ∏ÏßÄ',
                  onTap: () => context.push('/profile/edit'),
                ),
                _buildSettingItem(
                  icon: Icons.settings,
                  title: 'Í≥ÑÏ†ï ÏÑ§Ï†ï',
                  subtitle: 'Ïù¥Î©îÏùº, ÎπÑÎ∞ÄÎ≤àÌò∏ Î≥ÄÍ≤Ω',
                  onTap: () => context.push('/settings/account'),
                ),
              ],
            ),
            const SizedBox(height: 16),
            
            // Ïï± ÏÑ§Ï†ï
            _buildExpandableSection(
              key: 'app',
              title: 'Ïï± ÏÑ§Ï†ï',
              emoji: '‚öôÔ∏è',
              children: [
                _buildSettingItem(
                  icon: Icons.notifications,
                  title: 'ÏïåÎ¶º ÏÑ§Ï†ï',
                  subtitle: 'Ìë∏Ïãú ÏïåÎ¶º Î∞è Ïù¥Î©îÏùº ÏÑ§Ï†ï',
                  onTap: () => context.push('/settings/notifications'),
                ),
                _buildSettingItem(
                  icon: Icons.dark_mode,
                  title: 'ÌÖåÎßà ÏÑ§Ï†ï',
                  subtitle: 'ÎùºÏù¥Ìä∏/Îã§ÌÅ¨ Î™®Îìú Î∞è Ïª¨Îü¨',
                  onTap: () => context.push('/settings/theme'),
                ),
                _buildSettingItem(
                  icon: Icons.language,
                  title: 'Ïñ∏Ïñ¥ ÏÑ§Ï†ï',
                  subtitle: 'Ïï± Ïñ∏Ïñ¥ Î∞è ÏßÄÏó≠ ÏÑ§Ï†ï',
                  onTap: () => context.push('/settings/language'),
                ),
                _buildSettingItem(
                  icon: Icons.text_fields,
                  title: 'Ìè∞Ìä∏ ÏÑ§Ï†ï',
                  subtitle: 'Ìè∞Ìä∏ ÌÅ¨Í∏∞ Î∞è Ïä§ÌÉÄÏùº',
                  onTap: () => context.push('/settings/font'),
                ),
              ],
            ),
            const SizedBox(height: 16),
            
            // Í∞úÏù∏Ï†ïÎ≥¥ ÏÑ§Ï†ï
            _buildExpandableSection(
              key: 'privacy',
              title: 'Í∞úÏù∏Ï†ïÎ≥¥',
              emoji: 'üîí',
              children: [
                _buildSettingItem(
                  icon: Icons.security,
                  title: 'Î≥¥Ïïà ÏÑ§Ï†ï',
                  subtitle: 'Í≥ÑÏ†ï Î≥¥Ïïà Î∞è Ïù∏Ï¶ù',
                  onTap: () => context.push('/settings/security'),
                ),
                _buildSettingItem(
                  icon: Icons.visibility,
                  title: 'ÌîÑÎùºÏù¥Î≤ÑÏãú ÏÑ§Ï†ï',
                  subtitle: 'Îç∞Ïù¥ÌÑ∞ Í≥µÍ∞ú Î≤îÏúÑ ÏÑ§Ï†ï',
                  onTap: () => context.push('/settings/privacy'),
                ),
                _buildSettingItem(
                  icon: Icons.data_usage,
                  title: 'Îç∞Ïù¥ÌÑ∞ Í≥µÏú† ÏÑ§Ï†ï',
                  subtitle: 'Î∂ÑÏÑù Îç∞Ïù¥ÌÑ∞ ÏàòÏßë ÏÑ§Ï†ï',
                  onTap: () => context.push('/settings/data-sharing'),
                ),
              ],
            ),
            const SizedBox(height: 16),
            
            // Îç∞Ïù¥ÌÑ∞ Í¥ÄÎ¶¨
            _buildExpandableSection(
              key: 'data',
              title: 'Îç∞Ïù¥ÌÑ∞ Í¥ÄÎ¶¨',
              emoji: 'üíæ',
              children: [
                _buildSettingItem(
                  icon: Icons.backup,
                  title: 'Îç∞Ïù¥ÌÑ∞ Î∞±ÏóÖ',
                  subtitle: 'ÌÅ¥ÎùºÏö∞ÎìúÏóê Îç∞Ïù¥ÌÑ∞ Î∞±ÏóÖ',
                  onTap: () => context.push('/settings/backup'),
                ),
                _buildSettingItem(
                  icon: Icons.restore,
                  title: 'Îç∞Ïù¥ÌÑ∞ Î≥µÏõê',
                  subtitle: 'Î∞±ÏóÖÏóêÏÑú Îç∞Ïù¥ÌÑ∞ Î≥µÏõê',
                  onTap: () => context.push('/settings/restore'),
                ),

                _buildSettingItem(
                  icon: Icons.delete_forever,
                  title: 'Îç∞Ïù¥ÌÑ∞ ÏÇ≠Ï†ú',
                  subtitle: 'ÏÑ†ÌÉùÌïú Îç∞Ïù¥ÌÑ∞ ÏÇ≠Ï†ú',
                  onTap: () => context.push('/settings/data-delete'),
                ),
              ],
            ),
            const SizedBox(height: 16),
            
            // ÏßÄÏõê Î∞è Ï†ïÎ≥¥
            _buildExpandableSection(
              key: 'support',
              title: 'ÏßÄÏõê Î∞è Ï†ïÎ≥¥',
              emoji: '‚ÑπÔ∏è',
              children: [
                _buildSettingItem(
                  icon: Icons.help,
                  title: 'ÎèÑÏõÄÎßê',
                  subtitle: 'Ïï± ÏÇ¨Ïö©Î≤ï Î∞è FAQ',
                  onTap: () => context.push('/settings/help'),
                ),
                _buildSettingItem(
                  icon: Icons.feedback,
                  title: 'ÌîºÎìúÎ∞± Î≥¥ÎÇ¥Í∏∞',
                  subtitle: 'ÏùòÍ≤¨ Î∞è Î≤ÑÍ∑∏ Ïã†Í≥†',
                  onTap: () => context.push('/settings/feedback'),
                ),
                _buildSettingItem(
                  icon: Icons.info,
                  title: 'Ïï± Ï†ïÎ≥¥',
                  subtitle: 'Î≤ÑÏ†Ñ Î∞è ÎùºÏù¥ÏÑ†Ïä§ Ï†ïÎ≥¥',
                  onTap: () => context.push('/settings/about'),
                ),
              ],
            ),
            const SizedBox(height: 16),
            
            // ÏúÑÌóòÌïú ÏûëÏóÖ
            _buildExpandableSection(
              key: 'danger',
              title: 'ÏúÑÌóòÌïú ÏûëÏóÖ',
              emoji: '‚ö†Ô∏è',
              children: [
                _buildSettingItem(
                  icon: Icons.logout,
                  title: 'Î°úÍ∑∏ÏïÑÏõÉ',
                  subtitle: 'ÌòÑÏû¨ Í≥ÑÏ†ïÏóêÏÑú Î°úÍ∑∏ÏïÑÏõÉ',
                  onTap: () => _showLogoutDialog(),
                  isDanger: true,
                ),
                _buildSettingItem(
                  icon: Icons.delete_forever,
                  title: 'Í≥ÑÏ†ï ÏÇ≠Ï†ú',
                  subtitle: 'Í≥ÑÏ†ï Î∞è Î™®Îì† Îç∞Ïù¥ÌÑ∞ ÏòÅÍµ¨ ÏÇ≠Ï†ú',
                  onTap: () => _showDeleteAccountDialog(),
                  isDanger: true,
                ),
              ],
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildExpandableSection({
    required String key,
    required String title,
    required String emoji,
    required List<Widget> children,
  }) {
    final isExpanded = _expandedSections[key] ?? false;
    
    return Container(
      decoration: BoxDecoration(
        color: AppTheme.surface,
        borderRadius: BorderRadius.circular(16),
        border: Border.all(color: AppTheme.border),
        boxShadow: [
          BoxShadow(
            color: Colors.black.withOpacity(0.05),
            blurRadius: 10,
            offset: const Offset(0, 2),
          ),
        ],
      ),
      child: Column(
        children: [
          // Ìó§Îçî (ÌÅ¥Î¶≠ Í∞ÄÎä•)
          InkWell(
            onTap: () {
              setState(() {
                _expandedSections[key] = !isExpanded;
              });
            },
            borderRadius: const BorderRadius.only(
              topLeft: Radius.circular(16),
              topRight: Radius.circular(16),
            ),
            child: Container(
              padding: const EdgeInsets.all(20),
              child: Row(
                children: [
                  Text(
                    emoji,
                    style: const TextStyle(fontSize: 24),
                  ),
                  const SizedBox(width: 16),
                  Expanded(
                    child: Text(
                      title,
                      style: const TextStyle(
                        fontSize: 18,
                        fontWeight: FontWeight.bold,
                        color: AppTheme.textPrimary,
                      ),
                    ),
                  ),
                  AnimatedRotation(
                    turns: isExpanded ? 0.5 : 0,
                    duration: const Duration(milliseconds: 200),
                    child: Icon(
                      Icons.keyboard_arrow_down,
                      color: AppTheme.textSecondary,
                      size: 24,
                    ),
                  ),
                ],
              ),
            ),
          ),
          
          // Íµ¨Î∂ÑÏÑ†
          if (isExpanded)
            Divider(
              height: 1,
              color: AppTheme.divider,
              indent: 20,
              endIndent: 20,
            ),
          
          // ÌïòÏúÑ Ìï≠Î™©Îì§
          if (isExpanded)
            AnimatedContainer(
              duration: const Duration(milliseconds: 300),
              child: Column(
                children: children,
              ),
            ),
        ],
      ),
    );
  }

  Widget _buildSettingItem({
    required IconData icon,
    required String title,
    required String subtitle,
    required VoidCallback onTap,
    bool isDanger = false,
  }) {
    return ListTile(
      leading: Icon(
        icon,
        color: isDanger ? AppTheme.error : AppTheme.primary,
        size: 20,
      ),
      title: Text(
        title,
        style: TextStyle(
          color: isDanger ? AppTheme.error : AppTheme.textPrimary,
          fontWeight: FontWeight.w500,
        ),
      ),
      subtitle: Text(
        subtitle,
        style: TextStyle(
          color: AppTheme.textSecondary,
          fontSize: 12,
        ),
      ),
      trailing: Icon(
        Icons.chevron_right,
        color: AppTheme.textTertiary,
        size: 20,
      ),
      onTap: onTap,
      contentPadding: const EdgeInsets.symmetric(horizontal: 20, vertical: 8),
    );
  }

  void _showLogoutDialog() {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text('Î°úÍ∑∏ÏïÑÏõÉ'),
        content: const Text('Ï†ïÎßê Î°úÍ∑∏ÏïÑÏõÉ ÌïòÏãúÍ≤†ÏäµÎãàÍπå?'),
        actions: [
          TextButton(
            onPressed: () => Navigator.of(context).pop(),
            child: const Text('Ï∑®ÏÜå'),
          ),
          TextButton(
            onPressed: () async {
              Navigator.of(context).pop();
              await ref.read(profileProvider.notifier).signOut();
              if (context.mounted) {
                context.go('/login');
              }
            },
            child: const Text('Î°úÍ∑∏ÏïÑÏõÉ'),
          ),
        ],
      ),
    );
  }

  void _showDeleteAccountDialog() {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text('Í≥ÑÏ†ï ÏÇ≠Ï†ú'),
        content: const Text(
          'Ï†ïÎßêÎ°ú Í≥ÑÏ†ïÏùÑ ÏÇ≠Ï†úÌïòÏãúÍ≤†ÏäµÎãàÍπå?\n\nÏù¥ ÏûëÏóÖÏùÄ ÎêòÎèåÎ¶¥ Ïàò ÏóÜÏúºÎ©∞, Î™®Îì† Îç∞Ïù¥ÌÑ∞Í∞Ä ÏòÅÍµ¨Ï†ÅÏúºÎ°ú ÏÇ≠Ï†úÎê©ÎãàÎã§.',
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.of(context).pop(),
            child: const Text('Ï∑®ÏÜå'),
          ),
          TextButton(
            onPressed: () async {
              Navigator.of(context).pop();
              await _showDeleteAccountConfirmation();
            },
            style: TextButton.styleFrom(
              foregroundColor: AppTheme.error,
            ),
            child: const Text('ÏÇ≠Ï†ú'),
          ),
        ],
      ),
    );
  }

  Future<void> _showDeleteAccountConfirmation() async {
    final confirmed = await showDialog<bool>(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text('ÏµúÏ¢Ö ÌôïÏù∏'),
        content: const Text(
          'Í≥ÑÏ†ï ÏÇ≠Ï†úÎ•º ÏúÑÌïú ÏµúÏ¢Ö ÌôïÏù∏ÏûÖÎãàÎã§.\n\n'
          'Í≥ÑÏ†ïÏùÑ ÏÇ≠Ï†úÌïòÎ©¥:\n'
          '‚Ä¢ Î™®Îì† ÌîÑÎ°úÌïÑ Îç∞Ïù¥ÌÑ∞Í∞Ä ÏÇ≠Ï†úÎê©ÎãàÎã§\n'
          '‚Ä¢ Î™®Îì† ÏùºÍ∏∞ÏôÄ Í∞êÏ†ï Í∏∞Î°ùÏù¥ ÏÇ≠Ï†úÎê©ÎãàÎã§\n'
          '‚Ä¢ Firebase Í≥ÑÏ†ïÏù¥ ÏôÑÏ†ÑÌûà ÏÇ≠Ï†úÎê©ÎãàÎã§\n'
          '‚Ä¢ Ïù¥ ÏûëÏóÖÏùÄ ÎêòÎèåÎ¶¥ Ïàò ÏóÜÏäµÎãàÎã§\n\n'
          'Ï†ïÎßêÎ°ú ÏßÑÌñâÌïòÏãúÍ≤†ÏäµÎãàÍπå?',
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.of(context).pop(false),
            child: const Text('Ï∑®ÏÜå'),
          ),
          TextButton(
            onPressed: () => Navigator.of(context).pop(true),
            style: TextButton.styleFrom(
              foregroundColor: AppTheme.error,
            ),
            child: const Text('Í≥ÑÏ†ï ÏÇ≠Ï†ú'),
          ),
        ],
      ),
    );

    if (confirmed == true && context.mounted) {
      try {
        final success = await ref.read(profileProvider.notifier).deleteAccount();
        if (success && context.mounted) {
          ScaffoldMessenger.of(context).showSnackBar(
            const SnackBar(content: Text('Í≥ÑÏ†ïÏù¥ ÏÇ≠Ï†úÎêòÏóàÏäµÎãàÎã§')),
          );
          context.go('/login');
        }
      } catch (e) {
        if (context.mounted) {
          ScaffoldMessenger.of(context).showSnackBar(
            SnackBar(content: Text('Í≥ÑÏ†ï ÏÇ≠Ï†úÏóê Ïã§Ìå®ÌñàÏäµÎãàÎã§: $e')),
          );
        }
      }
    }
  }
}
