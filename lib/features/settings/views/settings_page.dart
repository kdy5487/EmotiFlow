import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:go_router/go_router.dart';
import 'package:emoti_flow/theme/app_theme.dart';
import 'package:emoti_flow/theme/app_typography.dart';
import 'package:emoti_flow/shared/widgets/cards/emoti_card.dart';
import 'package:emoti_flow/shared/widgets/buttons/emoti_button.dart';
import 'package:emoti_flow/shared/widgets/inputs/emoti_textfield.dart';
import '../widgets/settings_section_widget.dart';

class SettingsPage extends ConsumerStatefulWidget {
  const SettingsPage({super.key});

  @override
  ConsumerState<SettingsPage> createState() => _SettingsPageState();
}

class _SettingsPageState extends ConsumerState<SettingsPage> {
  bool _notificationsEnabled = true;
  bool _darkModeEnabled = false;
  bool _autoBackupEnabled = true;
  bool _analyticsEnabled = false;
  String _language = 'ÌïúÍµ≠Ïñ¥';
  double _fontSize = 16.0;

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: AppTheme.background,
      appBar: AppBar(
        title: const Text(
          'ÏÑ§Ï†ï',
          style: TextStyle(
            fontWeight: FontWeight.bold,
            color: AppTheme.primary,
          ),
        ),
        backgroundColor: Colors.transparent,
        elevation: 0,
        leading: IconButton(
          icon: const Icon(Icons.arrow_back),
          onPressed: () => context.pop(),
        ),
        actions: [
          IconButton(
            icon: const Icon(Icons.help_outline),
            onPressed: () {
              // ÎèÑÏõÄÎßê ÌéòÏù¥ÏßÄÎ°ú Ïù¥Îèô
            },
          ),
        ],
      ),
      body: SingleChildScrollView(
        padding: const EdgeInsets.all(16),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            // Í≥ÑÏ†ï ÏÑ§Ï†ï
            _buildAccountSection(),
            const SizedBox(height: 24),
            
            // Ïï± ÏÑ§Ï†ï
            _buildAppSettingsSection(),
            const SizedBox(height: 24),
            
            // Í∞úÏù∏Ï†ïÎ≥¥ ÏÑ§Ï†ï
            _buildPrivacySection(),
            const SizedBox(height: 24),
            
            // Îç∞Ïù¥ÌÑ∞ Í¥ÄÎ¶¨
            _buildDataManagementSection(),
            const SizedBox(height: 24),
            
            // ÏßÄÏõê Î∞è Ï†ïÎ≥¥
            _buildSupportSection(),
            const SizedBox(height: 24),
            
            // ÏúÑÌóòÌïú ÏûëÏóÖ
            _buildDangerZoneSection(),
          ],
        ),
      ),
    );
  }

  Widget _buildAccountSection() {
    return SettingsSectionWidget(
      title: 'Í≥ÑÏ†ï',
      emoji: 'üë§',
      children: [
        ListTile(
          leading: CircleAvatar(
            backgroundColor: AppTheme.error,
            child: const Icon(Icons.person, color: Colors.white),
          ),
          title: const Text('ÏÇ¨Ïö©Ïûê ÌîÑÎ°úÌïÑ'),
          subtitle: const Text('ÌîÑÎ°úÌïÑ Ï†ïÎ≥¥ ÏàòÏ†ï'),
          trailing: const Icon(Icons.chevron_right),
          onTap: () => context.push('/profile/edit'),
        ),
        ListTile(
          leading: const Icon(Icons.email),
          title: const Text('Ïù¥Î©îÏùº'),
          subtitle: const Text('user@example.com'),
          trailing: const Icon(Icons.chevron_right),
          onTap: () {
            // Ïù¥Î©îÏùº Î≥ÄÍ≤Ω ÌéòÏù¥ÏßÄÎ°ú Ïù¥Îèô
          },
        ),
        ListTile(
          leading: const Icon(Icons.lock),
          title: const Text('ÎπÑÎ∞ÄÎ≤àÌò∏'),
          subtitle: const Text('ÎßàÏßÄÎßâ Î≥ÄÍ≤Ω: 30Ïùº Ï†Ñ'),
          trailing: const Icon(Icons.chevron_right),
          onTap: () {
            // ÎπÑÎ∞ÄÎ≤àÌò∏ Î≥ÄÍ≤Ω ÌéòÏù¥ÏßÄÎ°ú Ïù¥Îèô
          },
        ),
      ],
    );
  }

  Widget _buildAppSettingsSection() {
    return SettingsSectionWidget(
      title: 'Ïï± ÏÑ§Ï†ï',
      emoji: '‚öôÔ∏è',
      children: [
        SwitchListTile(
          title: const Text('ÏïåÎ¶º'),
          subtitle: const Text('Ìë∏Ïãú ÏïåÎ¶º Î∞õÍ∏∞'),
          value: _notificationsEnabled,
          onChanged: (value) {
            setState(() {
              _notificationsEnabled = value;
            });
          },
          secondary: const Icon(Icons.notifications),
        ),
        SwitchListTile(
          title: const Text('Îã§ÌÅ¨ Î™®Îìú'),
          subtitle: const Text('Ïñ¥ÎëêÏö¥ ÌÖåÎßà ÏÇ¨Ïö©'),
          value: _darkModeEnabled,
          onChanged: (value) {
            setState(() {
              _darkModeEnabled = value;
            });
          },
          secondary: const Icon(Icons.dark_mode),
        ),
        ListTile(
          leading: const Icon(Icons.language),
          title: const Text('Ïñ∏Ïñ¥'),
          subtitle: Text(_language),
          trailing: const Icon(Icons.chevron_right),
          onTap: () {
            _showLanguageDialog();
          },
        ),
        ListTile(
          leading: const Icon(Icons.text_fields),
          title: const Text('Í∏ÄÏûê ÌÅ¨Í∏∞'),
          subtitle: Text('${_fontSize.round()}'),
          trailing: const Icon(Icons.chevron_right),
          onTap: () {
            _showFontSizeDialog();
          },
        ),
      ],
    );
  }

  Widget _buildPrivacySection() {
    return SettingsSectionWidget(
      title: 'Í∞úÏù∏Ï†ïÎ≥¥',
      emoji: 'üîí',
      children: [
        SwitchListTile(
          title: const Text('Î∂ÑÏÑù Îç∞Ïù¥ÌÑ∞ ÏàòÏßë'),
          subtitle: const Text('Ïï± ÏÇ¨Ïö© ÌÜµÍ≥Ñ ÏàòÏßë'),
          value: _analyticsEnabled,
          onChanged: (value) {
            setState(() {
              _analyticsEnabled = value;
            });
          },
          secondary: const Icon(Icons.analytics),
        ),
        ListTile(
          leading: const Icon(Icons.security),
          title: const Text('Í∞úÏù∏Ï†ïÎ≥¥ Ï≤òÎ¶¨Î∞©Ïπ®'),
          trailing: const Icon(Icons.chevron_right),
          onTap: () {
            // Í∞úÏù∏Ï†ïÎ≥¥ Ï≤òÎ¶¨Î∞©Ïπ® ÌéòÏù¥ÏßÄÎ°ú Ïù¥Îèô
          },
        ),
        ListTile(
          leading: const Icon(Icons.description),
          title: const Text('Ïù¥Ïö©ÏïΩÍ¥Ä'),
          trailing: const Icon(Icons.chevron_right),
          onTap: () {
            // Ïù¥Ïö©ÏïΩÍ¥Ä ÌéòÏù¥ÏßÄÎ°ú Ïù¥Îèô
          },
        ),
      ],
    );
  }

  Widget _buildDataManagementSection() {
    return SettingsSectionWidget(
      title: 'Îç∞Ïù¥ÌÑ∞ Í¥ÄÎ¶¨',
      emoji: 'üíæ',
      children: [
        SwitchListTile(
          title: const Text('ÏûêÎèô Î∞±ÏóÖ'),
          subtitle: const Text('ÌÅ¥ÎùºÏö∞ÎìúÏóê ÏûêÎèô Î∞±ÏóÖ'),
          value: _autoBackupEnabled,
          onChanged: (value) {
            setState(() {
              _autoBackupEnabled = value;
            });
          },
          secondary: const Icon(Icons.backup),
        ),
        ListTile(
          leading: const Icon(Icons.restore),
          title: const Text('Îç∞Ïù¥ÌÑ∞ Î≥µÏõê'),
          subtitle: const Text('Î∞±ÏóÖÏóêÏÑú Îç∞Ïù¥ÌÑ∞ Î≥µÏõê'),
          trailing: const Icon(Icons.chevron_right),
          onTap: () {
            // Îç∞Ïù¥ÌÑ∞ Î≥µÏõê ÌéòÏù¥ÏßÄÎ°ú Ïù¥Îèô
          },
        ),
        ListTile(
          leading: const Icon(Icons.refresh),
          title: const Text('Îç∞Ïù¥ÌÑ∞ ÎèôÍ∏∞Ìôî'),
          subtitle: const Text('ÌÅ¥ÎùºÏö∞ÎìúÏôÄ ÎèôÍ∏∞Ìôî'),
          trailing: const Icon(Icons.chevron_right),
          onTap: () {
            // Îç∞Ïù¥ÌÑ∞ ÎèôÍ∏∞Ìôî ÌéòÏù¥ÏßÄÎ°ú Ïù¥Îèô
          },
        ),
      ],
    );
  }

  Widget _buildSupportSection() {
    return SettingsSectionWidget(
      title: 'ÏßÄÏõê Î∞è Ï†ïÎ≥¥',
      emoji: '‚ùì',
      children: [
        ListTile(
          leading: const Icon(Icons.feedback),
          title: const Text('ÌîºÎìúÎ∞± Î≥¥ÎÇ¥Í∏∞'),
          trailing: const Icon(Icons.chevron_right),
          onTap: () {
            // ÌîºÎìúÎ∞± ÌéòÏù¥ÏßÄÎ°ú Ïù¥Îèô
          },
        ),
        ListTile(
          leading: const Icon(Icons.bug_report),
          title: const Text('Î≤ÑÍ∑∏ Ïã†Í≥†'),
          trailing: const Icon(Icons.chevron_right),
          onTap: () {
            // Î≤ÑÍ∑∏ Ïã†Í≥† ÌéòÏù¥ÏßÄÎ°ú Ïù¥Îèô
          },
        ),
        ListTile(
          leading: const Icon(Icons.info),
          title: const Text('Ïï± Ï†ïÎ≥¥'),
          subtitle: const Text('Î≤ÑÏ†Ñ 1.0.0'),
          trailing: const Icon(Icons.chevron_right),
          onTap: () {
            // Ïï± Ï†ïÎ≥¥ ÌéòÏù¥ÏßÄÎ°ú Ïù¥Îèô
          },
        ),
      ],
    );
  }

  Widget _buildDangerZoneSection() {
    return SettingsSectionWidget(
      title: 'ÏúÑÌóòÌïú ÏûëÏóÖ',
      emoji: '‚ö†Ô∏è',
      children: [
        ListTile(
          leading: const Icon(Icons.delete_forever, color: AppTheme.error),
          title: const Text('Í≥ÑÏ†ï ÏÇ≠Ï†ú'),
          subtitle: const Text('Î™®Îì† Îç∞Ïù¥ÌÑ∞Í∞Ä ÏòÅÍµ¨Ï†ÅÏúºÎ°ú ÏÇ≠Ï†úÎê©ÎãàÎã§'),
          trailing: const Icon(Icons.chevron_right),
          onTap: () {
            _showDeleteAccountDialog();
          },
        ),
      ],
    );
  }

  void _showLanguageDialog() {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text('Ïñ∏Ïñ¥ ÏÑ†ÌÉù'),
        content: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            RadioListTile<String>(
              title: const Text('ÌïúÍµ≠Ïñ¥'),
              value: 'ÌïúÍµ≠Ïñ¥',
              groupValue: _language,
              onChanged: (value) {
                setState(() {
                  _language = value!;
                });
                Navigator.pop(context);
              },
            ),
            RadioListTile<String>(
              title: const Text('English'),
              value: 'English',
              groupValue: _language,
              onChanged: (value) {
                setState(() {
                  _language = value!;
                });
                Navigator.pop(context);
              },
            ),
          ],
        ),
      ),
    );
  }

  void _showFontSizeDialog() {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text('Í∏ÄÏûê ÌÅ¨Í∏∞ Ï°∞Ï†ï'),
        content: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            Slider(
              value: _fontSize,
              min: 12.0,
              max: 24.0,
              divisions: 12,
              label: _fontSize.round().toString(),
              onChanged: (value) {
                setState(() {
                  _fontSize = value;
                });
              },
            ),
            Text(
              'ÏÉòÌîå ÌÖçÏä§Ìä∏',
              style: TextStyle(fontSize: _fontSize),
            ),
          ],
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: const Text('Ï∑®ÏÜå'),
          ),
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: const Text('ÌôïÏù∏'),
          ),
        ],
      ),
    );
  }

  void _showDeleteAccountDialog() {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text('Í≥ÑÏ†ï ÏÇ≠Ï†ú'),
        content: const Text(
          'Ï†ïÎßêÎ°ú Í≥ÑÏ†ïÏùÑ ÏÇ≠Ï†úÌïòÏãúÍ≤†ÏäµÎãàÍπå? Ïù¥ ÏûëÏóÖÏùÄ ÎêòÎèåÎ¶¥ Ïàò ÏóÜÏúºÎ©∞, Î™®Îì† Îç∞Ïù¥ÌÑ∞Í∞Ä ÏòÅÍµ¨Ï†ÅÏúºÎ°ú ÏÇ≠Ï†úÎê©ÎãàÎã§.',
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: const Text('Ï∑®ÏÜå'),
          ),
          TextButton(
            onPressed: () {
              Navigator.pop(context);
              // Í≥ÑÏ†ï ÏÇ≠Ï†ú Î°úÏßÅ Ïã§Ìñâ
            },
            style: TextButton.styleFrom(
              foregroundColor: AppTheme.error,
            ),
            child: const Text('ÏÇ≠Ï†ú'),
          ),
        ],
      ),
    );
  }
}
